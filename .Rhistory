label.hjust = .5,
nrow = 1,
byrow = TRUE,
reverse = FALSE,
label.position = "bottom"
)
) +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_text(
size = 11,
color = "grey20"
),
legend.text = element_text(
size = 10,
color = "grey20"
),
legend.position = "bottom",
axis.ticks = element_blank(),
rect = element_blank()
)
plot_18
# Testo legenda:
labs_tasso_di_fertilita_2020_map <- c("1.10", "1.20", "1.30", "1.40", "1.50", "1.60", "1.70")
# Testo legenda:
labs_tasso_di_fertilita_2020_map <- c("1.10", "1.20", "1.30", "1.40", "1.50", "1.60", "1.70+")
plot_18 <-
ggplot(tasso_di_fertilita_2020_map, aes(x = long, y = lat, group = group)) +
coord_map(projection = "mercator") +
geom_polygon(aes(fill = values_cut), color = "black") +
theme_void() +
ylab(NULL) +
xlab(NULL) +
scale_fill_manual(
name = "Tasso di FertilitÃ ",
values = palette_tasso_di_fertilita_2020_map,
labels = labs_tasso_di_fertilita_2020_map,
drop = FALSE,
guide = guide_legend(
direction = "horizontal",
keyheight = 0.5,
keywidth = 2.5,
title.position = "top",
title.hjust = 0.5,
label.hjust = .5,
nrow = 1,
byrow = TRUE,
reverse = FALSE,
label.position = "bottom"
)
) +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_text(
size = 11,
color = "grey20"
),
legend.text = element_text(
size = 10,
color = "grey20"
),
legend.position = "bottom",
axis.ticks = element_blank(),
rect = element_blank()
)
plot_18
ggsave(filename = "plot_18.png",
plot = plot_18,
bg = "transparent",
width = 1500, height = 1500, units = "px")
# -.-.-.-.- OPERAZIONI PRELIMINARI -.-.-.-.-
# Settaggio della working directory:
setwd("C://Users//Andrea//Desktop//Sviluppo Demografico dell'UE")
# Settaggio della lingua:
Sys.setenv(language = "en")
# Installazione librerie:
install.packages("")
# Librerie necessarie:
library(cartogram)
library(dplyr)
library(geosphere)
library(ggplot2)
library(giscoR)
library(maps)
library(scales)
library(sf)
library(tidyr)
library(tidyverse)
# Colori:
blu_base = "#305897"
# Notazione:
options(scipen = 10000)
# -.-.-.-.- NATALITA' E MORTALITA' -.-.-.-.-
immigrati_e_emigrati <- read.csv("CSV//immigrati_e_emigrati.csv", sep = ";", header = TRUE, check.names = FALSE)
head(immigrati_e_emigrati)
immigrati_e_emigrati_circle <- read.csv("CSV//immigrati_e_emigrati_circle.csv", sep = ";", header = TRUE, check.names = FALSE)
head(immigrati_e_emigrati_circle)
provenienza_emigrati <- read.csv("CSV//provenienza_emigrati.csv", sep = ";", header = TRUE, check.names = FALSE)
head(provenienza_emigrati)
# --- IMMIGRAZIONE E EMIGRAZIONE: GRAFICI --- #
# ..... CARTOGRAMMA: IMMIGRAZIONE 2020 ..... #
# Creazione mappa base con coordinate geospaziali:
immigrati_e_emigrati_map <- map_data("world")
immigrati_e_emigrati_map <-
left_join(immigrati_e_emigrati_map, immigrati_e_emigrati[c("region","immigration", "emigration")], by = "region")
# Eliminazione delle righe aventi valori NA:
immigrati_e_emigrati_map <- immigrati_e_emigrati_map %>%
filter(!is.na(immigrati_e_emigrati_map$"immigration"))
# Intervalli per i colori sulla mappa:
intervalli_immigrati_e_emigrati_map <- c(5000, 10000, 25000, 50000, 100000, 200000, 400000, 600000, 800000)
immigrati_e_emigrati_map$values_cut <- cut(immigrati_e_emigrati_map$"immigration",
breaks = intervalli_immigrati_e_emigrati_map,
dig.lab = 5
)
# Testo legenda:
labs_immigrati_e_emigrati_map <- c("10K", "25K", "50K", "100K", "200K", "400K", "600K", "800K", "1M")
# Palette mappa:
palette_immigrati_e_emigrati_map <- hcl.colors(length(immigrati_e_emigrati_map) - 1, "Blues3", rev = TRUE)
plot_20 <-
ggplot(immigrati_e_emigrati_map, aes(x = long, y = lat, group = group)) +
coord_map(projection = "mercator") +
geom_polygon(aes(fill = values_cut), color = "black") +
theme_void() +
ylab(NULL) +
xlab(NULL) +
scale_fill_manual(
name = "Immigrati",
values = palette_immigrati_e_emigrati_map,
labels = labs_immigrati_e_emigrati_map,
drop = FALSE,
guide = guide_legend(
direction = "horizontal",
keyheight = 0.5,
keywidth = 2.5,
title.position = "top",
title.hjust = 0.5,
label.hjust = .5,
nrow = 1,
byrow = TRUE,
reverse = FALSE,
label.position = "bottom"
)
) +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_text(
size = 11,
color = "grey20"
),
legend.text = element_text(
size = 10,
color = "grey20"
),
legend.position = "bottom",
axis.ticks = element_blank(),
rect = element_blank()
)
plot_20
ggsave(filename = "plot_20.png",
plot = plot_20,
bg = "transparent",
width = 1500, height = 1500, units = "px")
# ..... CARTOGRAMMA: EMIGRAZIONE 2020 ..... #
# Creazione mappa base con coordinate geospaziali:
emigrati_map <- map_data("world")
emigrati_map <-
left_join(emigrati_map, immigrati_e_emigrati[c("region", "emigration")], by = "region")
# Eliminazione delle righe aventi valori NA:
emigrati_map <- emigrati_map %>%
filter(!is.na(emigrati_map$"emigration"))
# Intervalli per i colori sulla mappa:
intervalli_emigrati_map <- c(2400, 5000, 10000, 20000, 50000, 75000, 100000, 150000, 200000, 400000, 600000)
emigrati_map$values_cut <- cut(emigrati_map$"emigration",
breaks = intervalli_emigrati_map,
dig.lab = 5
)
# Testo legenda:
labs_emigrati_map <- c("2.5K", "5K", "10K", "25K", "50K", "75K", "100K", "150K", "200K", "400K", "800K")
# Palette mappa:
palette_emigrati_map <- hcl.colors(10, "Blues3", rev = TRUE)
plot_21 <-
ggplot(emigrati_map, aes(x = long, y = lat, group = group)) +
coord_map(projection = "mercator") +
geom_polygon(aes(fill = values_cut), color = "black") +
theme_void() +
ylab(NULL) +
xlab(NULL) +
scale_fill_manual(
name = "Emigrati",
values = palette_emigrati_map,
labels = labs_emigrati_map,
drop = FALSE,
guide = guide_legend(
direction = "horizontal",
keyheight = 0.5,
keywidth = 2.5,
title.position = "top",
title.hjust = 0.5,
label.hjust = .5,
nrow = 1,
byrow = TRUE,
reverse = FALSE,
label.position = "bottom"
)
) +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.title = element_text(
size = 11,
color = "grey20"
),
legend.text = element_text(
size = 10,
color = "grey20"
),
legend.position = "bottom",
axis.ticks = element_blank(),
rect = element_blank()
)
plot_21
ggsave(filename = "plot_21.png",
plot = plot_21,
bg = "transparent",
width = 1500, height = 1500, units = "px")
# ..... EMICIRCLE: CONFRONTO I/E ..... #
plot_22 <- ggplot(immigrati_e_emigrati_circle, aes(x=x, y=sqrt(count), fill=type)) +
geom_col(width = 1, color = "#000000FF") +
scale_x_continuous(expand = c(0, 0), limits = c(0.5, 2.5)) +
scale_y_continuous(expand = c(0, 0)) +
coord_polar(theta = "x", direction = -1) +
facet_wrap(~region, ncol = 7) +
scale_fill_manual(values = c("#DDDDDD", blu_base), labels = c('Immigrazione', 'Emigrazione'), ) +
theme_void() +
theme(
legend.title = element_blank(),
legend.text = element_text(size = 10),
legend.position = "top",
)
plot_22
ggsave(filename = "plot_22.png",
plot = plot_22,
bg = "transparent",
width = 2000, height = 1500, units = "px")
# ..... GRAFO PROVENIENZA ..... #
# Mappa del mondo:
param <- par(mar = c(0, 0, 0, 0))
mappa <- map("world",
col = "#cccccc", fill = TRUE, bg = "transparent", lwd = 0.05,
mar = rep(0, 4), border = 1, ylim = c(-80,80)
)
europe <- provenienza_emigrati %>%
filter(provenienza_emigrati$continent == "Europe")
africa <- provenienza_emigrati %>%
filter(provenienza_emigrati$continent == "Africa")
asia <- provenienza_emigrati %>%
filter(provenienza_emigrati$continent == "Asia")
america <- provenienza_emigrati %>%
filter(provenienza_emigrati$continent == "America")
oceania <- provenienza_emigrati %>%
filter(provenienza_emigrati$continent == "Oceania")
draw_map <- function(x) {
param
mappa
return(
for(i in 1:nrow(x)){
inter <- gcIntermediate(c(x$long[i], x$lat[i]),  c(13, 41), n = 50, addStartEnd = TRUE, breakAtDateLine = F)
# Connessioni:
lines(inter, col = "#305897", lwd = x$inflows_normalized[i] * 5)
points(x = x$long[i], y = x$lat[i], col = "#305897", cex = 1, pch = 20)
}
)
}
draw_map(europe)
draw_map(africa)
draw_map(asia)
draw_map(america)
draw_map(oceania)
# -.-.-.-.- OPERAZIONI PRELIMINARI -.-.-.-.-
# Settaggio della working directory:
setwd("C://Users//Andrea//Desktop//Sviluppo Demografico dell'UE")
# Settaggio della lingua:
Sys.setenv(language = "en")
# Installazione librerie:
install.packages("")
# Librerie necessarie:
library(dplyr)
library(ggplot2)
library(ggraph)
library(htmlwidgets)
library(igraph)
library(quanteda)
library(quanteda.textstats)
library(rvest)
library(stopwords)
library(stringr)
library(tidygraph)
library(tidytext)
library(tm)
library(widyr)
library(wordcloud2)
webshot::install_phantomjs()
# Settaggio lingua italiana per lavorare su testi italiani:
quanteda_options(language_stemmer ="italian")
stopwords("it")
# -.-.-.-.- WEB SCRAPING -.-.-.-.- #
translated <- read.csv("CSV//articles.csv", sep = ";", header = TRUE, check.names = FALSE)
head(translated)
urls <- c()
# Loop per recuperare gli articoli degli ultimi 4.5 anni:
for(n in 1:28) {
# URL della pagina in cui fare web scraping:
cervelli_in_fuga = paste0("https://www.ilfattoquotidiano.it/cervelli-fuga/page/", n, "/")
# Lettura del codice HTML:
page = read_html(cervelli_in_fuga)
# URL degli articoli:
link <- page %>%
html_nodes("h3.p-item") %>%
html_nodes("a") %>%
html_attr("href")
urls <- append(urls, link)
}
cervelli_in_fuga_df <- data.frame(
urls = urls
)
articles <- c()
# Loop per recuperare i titoli, il corpo degli articoli e i commenti degli utenti:
for(url in cervelli_in_fuga_df$urls) {
article <- read_html(iconv(url, to = "UTF-8"), encoding =  "utf8") %>%
html_node("section.article-content") %>%
html_text()
articles <- append(articles, article)
}
cervelli_in_fuga_df$articles <- articles
# Preprocessing dei dati - caratteri speciali, punteggiatura e stop words:
preprcocessed_articles <- cervelli_in_fuga_df$articles %>%
str_to_lower() %>%
str_replace_all("[:punct:]", " ")
preprcocessed_articles_tokens <- preprcocessed_articles %>%
tokens()
preprcocessed_articles_tokens <- tokens_remove(preprcocessed_articles_tokens,
stopwords('it'))
preprcocessed_articles_tokens <- preprcocessed_articles_tokens %>%
str_replace_all("[\\s]", " ")
word_counts <- with(as.data.frame(preprcocessed_articles_tokens), as.data.frame(preprcocessed_articles_tokens)[ preprcocessed_articles_tokens != "" & preprcocessed_articles_tokens != " ", ])
# -.-.-.-.- WORD CLOUD -.-.-.-.- #
word_cloud <- table(word_counts)
word_cloud_filtered <- word_cloud[as.numeric(word_cloud) >= 100]
wc = wordcloud2(data = word_cloud_filtered, size=1, color='#305897', backgroundColor="transparent")
# saveWidget(wc,"plot_23.html", selfcontained = F, background = "transparent")
# -.-.-.-.- CO-OCCURENCY -.-.-.-.- #
co_occurency <- as.data.frame(word_counts)
# Separazione delle parole in sezioni (30 linee):
co_occurency <- co_occurency %>%
mutate(section = row_number() %/% 30) %>% #30
filter(section > 0)
# Si considerano solo le parole presenti almeno 50 volte:
co_occurency <- co_occurency %>%
group_by(word_counts) %>%
filter(n() >= 50) %>%
pairwise_cor(word_counts, section, sort = TRUE)
# Grafico:
co_occurency <- co_occurency %>%
filter(correlation > .1) %>%
as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE, color = "#305897") +
geom_node_point(color = "lightblue", size = 1) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
co_occurency
ggsave(filename = "plot_24.png",
plot = co_occurency,
bg = "transparent",
width = 2000, height = 2000, units = "px")
# -.-.-.-.- SENTIMENT ANALYSIS -.-.-.-.- #
# Preprocessing dei dati - caratteri speciali, punteggiatura e stop words:
preprcocessed_translated <- as.vector(translated) %>%
str_to_lower() %>%
str_replace_all("[:punct:]", " ")
preprcocessed_translated_tokens <- preprcocessed_translated %>%
tokens()
preprcocessed_translated_tokens <- tokens_remove(preprcocessed_translated_tokens,
stopwords('en'))
preprcocessed_translated_tokens <- preprcocessed_translated_tokens %>%
str_replace_all("[\\s]", " ")
articles_sentiment <- as.data.frame(preprcocessed_translated_tokens)
names(articles_sentiment)[names(articles_sentiment) == 'preprcocessed_translated_tokens'] <- 'word'
palette_sentiment <- c("#F15757", "#EB8E3C", "#5BB177", "#4C3A53", "#F2D68C", "#F29991", "#057FB9", "#00407C", "#8D679D", "#5FBEA6")
group_by(country, species) %>%
summarise(numbers = sum(numbers))
# ..... BARPLOT: SENTIMENT PIU' FREQUENTI ..... #
plot_25 <- articles_sentiment%>%
count(word) %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
group_by(sentiment) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(sentiment, n, fill = sentiment)) +
ylab(NULL) +
xlab(NULL) +
geom_col() +
coord_flip() +
theme_minimal() +
scale_fill_manual(values = palette_sentiment) +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, hjust = 1),
legend.position = "none",
)
plot_25
ggsave(filename = "plot_25.png",
plot = plot_25,
bg = "transparent",
width = 2500, height = 2000, units = "px")
# ..... BARPLOT: 6 PAROLE PIU' FREQUENTI ..... #
plot_26 <- articles_sentiment%>%
count(word) %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
group_by(sentiment) %>%
top_n(6, n) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment, label = n)) +
geom_col(color = "#000000") +
ylab(NULL) +
xlab(NULL) +
coord_cartesian(ylim = c(0, 500)) +
theme_minimal() +
scale_fill_manual(values = palette_sentiment) +
geom_text(position = position_dodge(width = .9), vjust = -0.5, size = 2.5) +
facet_wrap(~ sentiment, scales = "free", ncol = 5) +
theme(
axis.text.x = element_text(size = 7.5, angle = 45, hjust = 1),
axis.text.y = element_blank(),
legend.position = "none",
)
plot_26
ggsave(filename = "plot_26.png",
plot = plot_26,
bg = "transparent",
width = 2000, height = 2000, units = "px")
plot_26 <- articles_sentiment%>%
count(word) %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
group_by(sentiment) %>%
top_n(6, n) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment, label = n)) + #hcl.colors(10, "Blues3")
geom_col(color = "#000000") +
ylab(NULL) +
xlab(NULL) +
coord_cartesian(ylim = c(0, 500)) +
theme_minimal() +
scale_fill_manual(values = hcl.colors(10, "Blues3")) +
geom_text(position = position_dodge(width = .9), vjust = -0.5, size = 2.5) +
facet_wrap(~ sentiment, scales = "free", ncol = 5) +
theme(
axis.text.x = element_text(size = 7.5, angle = 45, hjust = 1),
axis.text.y = element_blank(),
legend.position = "none",
)
plot_26
plot_25 <- articles_sentiment%>%
count(word) %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
group_by(sentiment) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(sentiment, n, fill = sentiment)) +
ylab(NULL) +
xlab(NULL) +
geom_col() +
coord_flip() +
theme_minimal() +
scale_fill_manual(values = hcl.colors(10, "Blues3")) +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 10, hjust = 1),
legend.position = "none",
)
plot_25
plot_26 <- articles_sentiment%>%
count(word) %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
group_by(sentiment) %>%
top_n(6, n) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment, label = n)) + #hcl.colors(10, "Blues3")
geom_col(color = "#000000") +
ylab(NULL) +
xlab(NULL) +
coord_cartesian(ylim = c(0, 500)) +
theme_minimal() +
scale_fill_manual(values = palette_sentiment) +
geom_text(position = position_dodge(width = .9), vjust = -0.5, size = 2.5) +
facet_wrap(~ sentiment, scales = "free", ncol = 5) +
theme(
axis.text.x = element_text(size = 7.5, angle = 45, hjust = 1),
axis.text.y = element_blank(),
legend.position = "none",
)
plot_26
ggsave(filename = "plot_26.png",
plot = plot_26,
bg = "transparent",
width = 2000, height = 1500, units = "px")
